// This file is auto-generated by @hey-api/openapi-ts

export type Order = {
    id?: number;
    petId?: number;
    quantity?: number;
    shipDate?: string;
    /**
     * Order Status
     */
    status?: 'placed' | 'approved' | 'delivered';
    complete?: boolean;
};

/**
 * Order Status
 */
export type status = 'placed' | 'approved' | 'delivered';

export type Customer = {
    id?: number;
    username?: string;
    address?: Array<Address>;
};

export type Address = {
    street?: string;
    city?: string;
    state?: string;
    zip?: string;
};

export type Category = {
    id?: number;
    name?: string;
};

export type User = {
    id?: number;
    username?: string;
    firstName?: string;
    lastName?: string;
    email?: string;
    password?: string;
    phone?: string;
    /**
     * User Status
     */
    userStatus?: number;
};

export type Tag = {
    id?: number;
    name?: string;
};

export type Pet = {
    id?: number;
    name: string;
    category?: Category;
    photoUrls: Array<(string)>;
    tags?: Array<Tag>;
    /**
     * pet status in the store
     */
    status?: 'available' | 'pending' | 'sold';
};

/**
 * pet status in the store
 */
export type status2 = 'available' | 'pending' | 'sold';

export type ApiResponse = {
    code?: number;
    type?: string;
    message?: string;
};

export type UpdatePetData = {
    /**
     * Update an existent pet in the store
     */
    requestBody: Pet;
};

export type UpdatePetResponse = Pet;

export type AddPetData = {
    /**
     * Create a new pet in the store
     */
    requestBody: Pet;
};

export type AddPetResponse = Pet;

export type FindPetsByStatusData = {
    /**
     * Status values that need to be considered for filter
     */
    status?: 'available' | 'pending' | 'sold';
};

export type FindPetsByStatusResponse = Array<Pet>;

export type FindPetsByTagsData = {
    /**
     * Tags to filter by
     */
    tags?: Array<(string)>;
};

export type FindPetsByTagsResponse = Array<Pet>;

export type GetPetByIdData = {
    /**
     * ID of pet to return
     */
    petId: number;
};

export type GetPetByIdResponse = Pet;

export type UpdatePetWithFormData = {
    /**
     * Name of pet that needs to be updated
     */
    name?: string;
    /**
     * ID of pet that needs to be updated
     */
    petId: number;
    /**
     * Status of pet that needs to be updated
     */
    status?: string;
};

export type DeletePetData = {
    apiKey?: string;
    /**
     * Pet id to delete
     */
    petId: number;
};

export type UploadFileData = {
    /**
     * Additional Metadata
     */
    additionalMetadata?: string;
    /**
     * ID of pet to update
     */
    petId: number;
    requestBody?: (Blob | File);
};

export type UploadFileResponse = ApiResponse;

export type GetInventoryResponse = {
    [key: string]: (number);
};

export type PlaceOrderData = {
    requestBody?: Order;
};

export type PlaceOrderResponse = Order;

export type GetOrderByIdData = {
    /**
     * ID of order that needs to be fetched
     */
    orderId: number;
};

export type GetOrderByIdResponse = Order;

export type DeleteOrderData = {
    /**
     * ID of the order that needs to be deleted
     */
    orderId: number;
};

export type CreateUserData = {
    /**
     * Created user object
     */
    requestBody?: User;
};

export type CreateUserResponse = User;

export type CreateUsersWithListInputData = {
    requestBody?: Array<User>;
};

export type CreateUsersWithListInputResponse = User | unknown;

export type LoginUserData = {
    /**
     * The password for login in clear text
     */
    password?: string;
    /**
     * The user name for login
     */
    username?: string;
};

export type LoginUserResponse = string;

export type LogoutUserResponse = unknown;

export type GetUserByNameData = {
    /**
     * The name that needs to be fetched. Use user1 for testing.
     */
    username: string;
};

export type GetUserByNameResponse = User;

export type UpdateUserData = {
    /**
     * Update an existent user in the store
     */
    requestBody?: User;
    /**
     * name that needs to be updated
     */
    username: string;
};

export type UpdateUserResponse = unknown;

export type DeleteUserData = {
    /**
     * The name that needs to be deleted
     */
    username: string;
};

export type $OpenApiTs = {
    '/pet': {
        put: {
            req: UpdatePetData;
            res: {
                /**
                 * Successful operation
                 */
                200: Pet;
                /**
                 * Invalid ID supplied
                 */
                400: unknown;
                /**
                 * Pet not found
                 */
                404: unknown;
                /**
                 * Validation exception
                 */
                405: unknown;
            };
        };
        post: {
            req: AddPetData;
            res: {
                /**
                 * Successful operation
                 */
                200: Pet;
                /**
                 * Invalid input
                 */
                405: unknown;
            };
        };
    };
    '/pet/findByStatus': {
        get: {
            req: FindPetsByStatusData;
            res: {
                /**
                 * successful operation
                 */
                200: Array<Pet>;
                /**
                 * Invalid status value
                 */
                400: unknown;
            };
        };
    };
    '/pet/findByTags': {
        get: {
            req: FindPetsByTagsData;
            res: {
                /**
                 * successful operation
                 */
                200: Array<Pet>;
                /**
                 * Invalid tag value
                 */
                400: unknown;
            };
        };
    };
    '/pet/{petId}': {
        get: {
            req: GetPetByIdData;
            res: {
                /**
                 * successful operation
                 */
                200: Pet;
                /**
                 * Invalid ID supplied
                 */
                400: unknown;
                /**
                 * Pet not found
                 */
                404: unknown;
            };
        };
        post: {
            req: UpdatePetWithFormData;
            res: {
                /**
                 * Invalid input
                 */
                405: unknown;
            };
        };
        delete: {
            req: DeletePetData;
            res: {
                /**
                 * Invalid pet value
                 */
                400: unknown;
            };
        };
    };
    '/pet/{petId}/uploadImage': {
        post: {
            req: UploadFileData;
            res: {
                /**
                 * successful operation
                 */
                200: ApiResponse;
            };
        };
    };
    '/store/inventory': {
        get: {
            res: {
                /**
                 * successful operation
                 */
                200: {
                    [key: string]: (number);
                };
            };
        };
    };
    '/store/order': {
        post: {
            req: PlaceOrderData;
            res: {
                /**
                 * successful operation
                 */
                200: Order;
                /**
                 * Invalid input
                 */
                405: unknown;
            };
        };
    };
    '/store/order/{orderId}': {
        get: {
            req: GetOrderByIdData;
            res: {
                /**
                 * successful operation
                 */
                200: Order;
                /**
                 * Invalid ID supplied
                 */
                400: unknown;
                /**
                 * Order not found
                 */
                404: unknown;
            };
        };
        delete: {
            req: DeleteOrderData;
            res: {
                /**
                 * Invalid ID supplied
                 */
                400: unknown;
                /**
                 * Order not found
                 */
                404: unknown;
            };
        };
    };
    '/user': {
        post: {
            req: CreateUserData;
            res: {
                /**
                 * successful operation
                 */
                default: User;
            };
        };
    };
    '/user/createWithList': {
        post: {
            req: CreateUsersWithListInputData;
            res: {
                /**
                 * Successful operation
                 */
                200: User;
                /**
                 * successful operation
                 */
                default: unknown;
            };
        };
    };
    '/user/login': {
        get: {
            req: LoginUserData;
            res: {
                /**
                 * successful operation
                 */
                200: string;
                /**
                 * Invalid username/password supplied
                 */
                400: unknown;
            };
        };
    };
    '/user/logout': {
        get: {
            res: {
                /**
                 * successful operation
                 */
                default: unknown;
            };
        };
    };
    '/user/{username}': {
        get: {
            req: GetUserByNameData;
            res: {
                /**
                 * successful operation
                 */
                200: User;
                /**
                 * Invalid username supplied
                 */
                400: unknown;
                /**
                 * User not found
                 */
                404: unknown;
            };
        };
        put: {
            req: UpdateUserData;
            res: {
                /**
                 * successful operation
                 */
                default: unknown;
            };
        };
        delete: {
            req: DeleteUserData;
            res: {
                /**
                 * Invalid username supplied
                 */
                400: unknown;
                /**
                 * User not found
                 */
                404: unknown;
            };
        };
    };
};