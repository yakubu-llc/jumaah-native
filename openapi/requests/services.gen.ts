// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { UpdatePetData, UpdatePetResponse, AddPetData, AddPetResponse, FindPetsByStatusData, FindPetsByStatusResponse, FindPetsByTagsData, FindPetsByTagsResponse, GetPetByIdData, GetPetByIdResponse, UpdatePetWithFormData, DeletePetData, UploadFileData, UploadFileResponse, GetInventoryResponse, PlaceOrderData, PlaceOrderResponse, GetOrderByIdData, GetOrderByIdResponse, DeleteOrderData, CreateUserData, CreateUserResponse, CreateUsersWithListInputData, CreateUsersWithListInputResponse, LoginUserData, LoginUserResponse, LogoutUserResponse, GetUserByNameData, GetUserByNameResponse, UpdateUserData, UpdateUserResponse, DeleteUserData } from './types.gen';

export class PetService {
    /**
     * Update an existing pet
     * Update an existing pet by Id
     * @param data The data for the request.
     * @param data.requestBody Update an existent pet in the store
     * @returns Pet Successful operation
     * @throws ApiError
     */
    public static updatePet(data: UpdatePetData): CancelablePromise<UpdatePetResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/pet',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid ID supplied',
                404: 'Pet not found',
                405: 'Validation exception'
            }
        });
    }
    
    /**
     * Add a new pet to the store
     * Add a new pet to the store
     * @param data The data for the request.
     * @param data.requestBody Create a new pet in the store
     * @returns Pet Successful operation
     * @throws ApiError
     */
    public static addPet(data: AddPetData): CancelablePromise<AddPetResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/pet',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                405: 'Invalid input'
            }
        });
    }
    
    /**
     * Finds Pets by status
     * Multiple status values can be provided with comma separated strings
     * @param data The data for the request.
     * @param data.status Status values that need to be considered for filter
     * @returns Pet successful operation
     * @throws ApiError
     */
    public static findPetsByStatus(data: FindPetsByStatusData = {}): CancelablePromise<FindPetsByStatusResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/pet/findByStatus',
            query: {
                status: data.status
            },
            errors: {
                400: 'Invalid status value'
            }
        });
    }
    
    /**
     * Finds Pets by tags
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @param data The data for the request.
     * @param data.tags Tags to filter by
     * @returns Pet successful operation
     * @throws ApiError
     */
    public static findPetsByTags(data: FindPetsByTagsData = {}): CancelablePromise<FindPetsByTagsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/pet/findByTags',
            query: {
                tags: data.tags
            },
            errors: {
                400: 'Invalid tag value'
            }
        });
    }
    
    /**
     * Find pet by ID
     * Returns a single pet
     * @param data The data for the request.
     * @param data.petId ID of pet to return
     * @returns Pet successful operation
     * @throws ApiError
     */
    public static getPetById(data: GetPetByIdData): CancelablePromise<GetPetByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/pet/{petId}',
            path: {
                petId: data.petId
            },
            errors: {
                400: 'Invalid ID supplied',
                404: 'Pet not found'
            }
        });
    }
    
    /**
     * Updates a pet in the store with form data
     * @param data The data for the request.
     * @param data.petId ID of pet that needs to be updated
     * @param data.name Name of pet that needs to be updated
     * @param data.status Status of pet that needs to be updated
     * @throws ApiError
     */
    public static updatePetWithForm(data: UpdatePetWithFormData): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/pet/{petId}',
            path: {
                petId: data.petId
            },
            query: {
                name: data.name,
                status: data.status
            },
            errors: {
                405: 'Invalid input'
            }
        });
    }
    
    /**
     * Deletes a pet
     * @param data The data for the request.
     * @param data.petId Pet id to delete
     * @param data.apiKey
     * @throws ApiError
     */
    public static deletePet(data: DeletePetData): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/pet/{petId}',
            path: {
                petId: data.petId
            },
            headers: {
                api_key: data.apiKey
            },
            errors: {
                400: 'Invalid pet value'
            }
        });
    }
    
    /**
     * uploads an image
     * @param data The data for the request.
     * @param data.petId ID of pet to update
     * @param data.additionalMetadata Additional Metadata
     * @param data.requestBody
     * @returns ApiResponse successful operation
     * @throws ApiError
     */
    public static uploadFile(data: UploadFileData): CancelablePromise<UploadFileResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/pet/{petId}/uploadImage',
            path: {
                petId: data.petId
            },
            query: {
                additionalMetadata: data.additionalMetadata
            },
            body: data.requestBody,
            mediaType: 'application/octet-stream'
        });
    }
    
}

export class StoreService {
    /**
     * Returns pet inventories by status
     * Returns a map of status codes to quantities
     * @returns number successful operation
     * @throws ApiError
     */
    public static getInventory(): CancelablePromise<GetInventoryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/store/inventory'
        });
    }
    
    /**
     * Place an order for a pet
     * Place a new order in the store
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Order successful operation
     * @throws ApiError
     */
    public static placeOrder(data: PlaceOrderData = {}): CancelablePromise<PlaceOrderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/store/order',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                405: 'Invalid input'
            }
        });
    }
    
    /**
     * Find purchase order by ID
     * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
     * @param data The data for the request.
     * @param data.orderId ID of order that needs to be fetched
     * @returns Order successful operation
     * @throws ApiError
     */
    public static getOrderById(data: GetOrderByIdData): CancelablePromise<GetOrderByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/store/order/{orderId}',
            path: {
                orderId: data.orderId
            },
            errors: {
                400: 'Invalid ID supplied',
                404: 'Order not found'
            }
        });
    }
    
    /**
     * Delete purchase order by ID
     * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
     * @param data The data for the request.
     * @param data.orderId ID of the order that needs to be deleted
     * @throws ApiError
     */
    public static deleteOrder(data: DeleteOrderData): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/store/order/{orderId}',
            path: {
                orderId: data.orderId
            },
            errors: {
                400: 'Invalid ID supplied',
                404: 'Order not found'
            }
        });
    }
    
}

export class UserService {
    /**
     * Create user
     * This can only be done by the logged in user.
     * @param data The data for the request.
     * @param data.requestBody Created user object
     * @returns User successful operation
     * @throws ApiError
     */
    public static createUser(data: CreateUserData = {}): CancelablePromise<CreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/user',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Creates list of users with given input array
     * Creates list of users with given input array
     * @param data The data for the request.
     * @param data.requestBody
     * @returns User Successful operation
     * @returns unknown successful operation
     * @throws ApiError
     */
    public static createUsersWithListInput(data: CreateUsersWithListInputData = {}): CancelablePromise<CreateUsersWithListInputResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/user/createWithList',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Logs user into the system
     * @param data The data for the request.
     * @param data.username The user name for login
     * @param data.password The password for login in clear text
     * @returns string successful operation
     * @throws ApiError
     */
    public static loginUser(data: LoginUserData = {}): CancelablePromise<LoginUserResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/user/login',
            query: {
                username: data.username,
                password: data.password
            },
            errors: {
                400: 'Invalid username/password supplied'
            }
        });
    }
    
    /**
     * Logs out current logged in user session
     * @returns unknown successful operation
     * @throws ApiError
     */
    public static logoutUser(): CancelablePromise<LogoutUserResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/user/logout'
        });
    }
    
    /**
     * Get user by user name
     * @param data The data for the request.
     * @param data.username The name that needs to be fetched. Use user1 for testing.
     * @returns User successful operation
     * @throws ApiError
     */
    public static getUserByName(data: GetUserByNameData): CancelablePromise<GetUserByNameResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/user/{username}',
            path: {
                username: data.username
            },
            errors: {
                400: 'Invalid username supplied',
                404: 'User not found'
            }
        });
    }
    
    /**
     * Update user
     * This can only be done by the logged in user.
     * @param data The data for the request.
     * @param data.username name that needs to be updated
     * @param data.requestBody Update an existent user in the store
     * @returns unknown successful operation
     * @throws ApiError
     */
    public static updateUser(data: UpdateUserData): CancelablePromise<UpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/user/{username}',
            path: {
                username: data.username
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Delete user
     * This can only be done by the logged in user.
     * @param data The data for the request.
     * @param data.username The name that needs to be deleted
     * @throws ApiError
     */
    public static deleteUser(data: DeleteUserData): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/user/{username}',
            path: {
                username: data.username
            },
            errors: {
                400: 'Invalid username supplied',
                404: 'User not found'
            }
        });
    }
    
}